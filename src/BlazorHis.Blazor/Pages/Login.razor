@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using BlazorHis.Login;
@inject MessageService _message
@inject HttpClient Http
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject NotificationService _notice



<Form Model="@model"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      LabelColSpan="8"
      WrapperColSpan="16">
    <FormItem Label="用户名">
        <Input @bind-Value="@context.userNameOrEmailAddress" />
    </FormItem>
    <FormItem Label="密码">
        <InputPassword @bind-Value="@context.password" />
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Checkbox @bind-Value="context.rememberMe">Remember me</Checkbox>
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Submit
        </Button>
    </FormItem>
</Form>
@code
{
    protected  override void OnInitialized()
    {

    }
    public class Model
    {
        [Required]
        public string userNameOrEmailAddress { get; set; } = "admin";
        [Required]
        public string password { get; set; } = "1q2w3E*";
        public bool rememberMe { get; set; } = true;
    }
    #region 父组件向子组件传值


    [Parameter]
    public string Param { get; set; }
    //public override async Task SetParametersAsync(ParameterView parameters)
    //{
    //    if (parameters.TryGetValue<string>(nameof(Param), out var value))
    //    {
    //        _message.Success($"The value of 'Param' is {value}.");
    //    }
    //    else
    //    {
    //        _message.Error("The value of 'Param' is null.------------------");
    //    }

    //    await base.SetParametersAsync(parameters);
    //}
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await _message.Success($"The value of 'Param' is {Param}.");
        }
    }
    #endregion

    #region 子组件更新父组件
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    #endregion


    private Model model = new Model();

    private async Task OnFinish(EditContext editContext)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<Model>($@"/api/account/login", model);
            string resultContent = result.Content.ReadAsStringAsync().Result;

            Console.WriteLine($"Success:{JsonSerializer.Serialize(resultContent)}");
            if (JsonSerializer.Deserialize<LoginResponse>(resultContent).result == 1)
            {
                await OnClickCallback.InvokeAsync();
                await _message.Success("登陆成功！！！");
            }
            else
            {
                await _message.Error("登陆失败！！！");
            }
        }
        catch (Exception )
        {
            await _notice.Open(new NotificationConfig()
            {
                Message = "异常",
                Description = "无法连接到服务器！！！"
            });
        }

    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }
}